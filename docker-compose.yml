version: '3.8'

services:
  # Main MCP server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: mcp-server-newrelic:latest
    container_name: mcp-server-newrelic
    environment:
      # New Relic Configuration
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - NEW_RELIC_REGION=${NEW_RELIC_REGION:-US}
      
      # MCP Configuration
      - MCP_TRANSPORT=${MCP_TRANSPORT:-http}
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=3000
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      
      # Features
      - USE_ENHANCED_PLUGINS=${USE_ENHANCED_PLUGINS:-true}
      - ENABLE_AUDIT_LOGGING=${ENABLE_AUDIT_LOGGING:-true}
      - ENABLE_PROMETHEUS_METRICS=${ENABLE_PROMETHEUS_METRICS:-true}
      
      # Performance
      - CONNECTION_POOL_SIZE=${CONNECTION_POOL_SIZE:-10}
      - CACHE_MAX_SIZE=${CACHE_MAX_SIZE:-1000}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
    ports:
      - "${HTTP_PORT:-3000}:3000"   # MCP HTTP API
      - "${PROMETHEUS_PORT:-9090}:9090"  # Prometheus metrics
    volumes:
      - ./configs:/app/configs:ro
      - ./data:/app/data
      - audit-logs:/app/audit_logs
      - cache-data:/app/.cache
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:3000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mcp-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Development environment with hot reload
  mcp-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: mcp-server-newrelic:dev
    container_name: mcp-server-newrelic-dev
    environment:
      # Copy all env vars from main service
      - NEW_RELIC_API_KEY=${NEW_RELIC_API_KEY}
      - NEW_RELIC_ACCOUNT_ID=${NEW_RELIC_ACCOUNT_ID}
      - MCP_TRANSPORT=http
      - HTTP_HOST=0.0.0.0
      - HTTP_PORT=3001
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=text
      - DEBUG_MODE=true
      - AUTO_RELOAD=true
    ports:
      - "3001:3001"      # Dev server
      - "9091:9090"      # Dev metrics
    volumes:
      # Mount source code for hot reload
      - .:/app:cached
      - /app/venv        # Exclude venv from mount
      - /app/.pytest_cache
      - /app/__pycache__
    networks:
      - mcp-network
    profiles:
      - dev

  # Redis for distributed caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mcp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mcp-network
    profiles:
      - full
    command: redis-server --save 20 1 --loglevel warning

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: mcp-prometheus
    ports:
      - "9092:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - mcp-network
    profiles:
      - monitoring

volumes:
  audit-logs:
  cache-data:
  redis-data:
  prometheus-data:

networks:
  mcp-network:
    driver: bridge